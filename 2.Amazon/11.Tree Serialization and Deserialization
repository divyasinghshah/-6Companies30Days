class Solution
{
    public:
    
    void preOrder(Node *n , vector<int> &arr){
       if(!n){
           arr.push_back(-1);
           return;
       } 
       arr.push_back(n->data);
       preOrder(n->left , arr);
       preOrder(n->right , arr);
   }
   
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        //Your code here
       vector<int> ans;
       preOrder(root , ans);
      
       return ans;
        
        
    }
    int i=0;
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
       //Your code here
       if(A.size()==0) return NULL;
       if(A[i]==-1){
           i++;
           return NULL;
       }
       Node *root=new Node(A[i++]);
       root->left=deSerialize(A);
       root->right=deSerialize(A);
       return root;
    }

};
