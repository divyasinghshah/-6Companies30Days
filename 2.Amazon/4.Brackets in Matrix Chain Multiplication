class Solution{
public:
    string st="";
    
    
    void printParenthesis(int i, int j, int n, int* bracket, char& name)
            {
                // If only one matrix left in current segment
                if (i == j) {
                    st+=name;
                    name++;
                    return;
                }
            
              st+='(';
            
                
                printParenthesis(i, *((bracket + i * n) + j), n,
                                 bracket, name);
            
                
                printParenthesis(*((bracket + i * n) + j) + 1, j, n,
                                 bracket, name);
                st+=')';
            }
    string matrixChainOrder(int p[], int n){
        // code here
        
          int dp[n-1][n-1]={0};
        int s[n-1][n-1]={0};
        
    for(int d=1;d<n-1;d++){
        for(int i=0;i<n-d;i++){
            int j=i+d;
           
            int min_ele=INT_MAX;
           
                
                for(int k=i;k<j;k++){
                    int x=dp[i][k]+dp[k+1][j]+p[i]*p[k+1]*p[j+1];
                    if(x<min_ele){
                        min_ele=x;
                        s[i][j]=k;
                    }
                   
                    
                
                dp[i][j]=min_ele; 
                
                
            }
        }
    }
    char name = 'A';
    printParenthesis(0, n - 2, n-1, (int*)s, name);
    
       return st;
    }
};
