class Solution {
public:
    int dir[4][4]={{0,1},{1,0},{-1,0},{0,-1}};
    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    q.push(make_pair(i,j));
                }
            }
        }
        
        if(q.empty() || q.size()== m*n)
            return -1;
        
        int level=-1;
        while(!q.empty()){
            level++;
            int size=q.size();
            while(size--){
                pair<int,int> p=q.front();
                q.pop();
                for(int i=0;i<4;i++){
                    int x=p.first+dir[i][0];
                    int y=p.second+dir[i][1];
                    
                    if(x<0 || y<0 || x>=grid.size() || y>=grid[0].size() || grid[x][y]==1 )
                        continue;
                    q.push(make_pair(x,y));
                    grid[x][y]=1;
                }
                
            }
        }
        
        return level;
        
    }
};
