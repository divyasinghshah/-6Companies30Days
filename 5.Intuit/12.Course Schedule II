class Solution {
public:
    bool detectCycle_util(vector<vector<int>> &adj, vector<int> & vis, int v){
        if(vis[v]==1)
            return true;
        if(vis[v]==2)
            return false;
        
        vis[v]=1;
        
        for(int i=0;i<adj[v].size();i++){
            if(detectCycle_util(adj,vis,adj[v][i]))
                return true;
        }
        vis[v]=2;
        return false;
    }
    
    bool detectCycle(vector<vector<int>> &adj, int n){
        vector<int> vis(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                if(detectCycle_util(adj,vis,i))
                    return true;
            }
        }
        
        return false;
    }
    
    void dfs(vector<vector<int>>& adj, int i, vector<bool>& vis,stack<int> &s){
        vis[i]=true;
        for(int j=0;j<adj[i].size();j++){
            if(!vis[adj[i][j]]){
                dfs(adj,adj[i][j],vis,s);
            }
        }
        
            s.push(i);
    }
    
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        int n=prerequisites.size();
        vector<vector<int>> adj(numCourses);
        
        
        for(int i=0;i<n;i++){
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        
        vector<int> ans;
        

        
        if(detectCycle(adj,numCourses))
            return ans;
        
        stack<int> s;
        
        vector<bool> vis(numCourses,false);
        for(int i=0;i<numCourses;i++){
            if(!vis[i])
                dfs(adj,i,vis,s);
            
            
        }
        
        while(!s.empty()){
                ans.push_back(s.top());
                s.pop();
            }
        
        return ans;
    }
};
